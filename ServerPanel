package Game;
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;


public class ServerPanel extends JPanel implements Runnable
{
	
	public	JPanel panel;
	
	private JTextField userText;
	private JTextArea chatWindow;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private ServerSocket server;
	private Socket connection;
	
	public ServerPanel(){
		setLayout(null);
		
		panel = new JPanel();
		panel.setBackground(Color.GREEN);
		panel.setBounds(0, 0, 600, 451);
		add(panel);
		panel.setLayout(null);
		
		userText = new JTextField();
		userText.setBounds(376, 321, 200, 20);
		userText.setEditable(false);
		userText.addActionListener(
				new ActionListener()
			{
					public void actionPerformed(ActionEvent event)
					{
						sendMessage(event.getActionCommand());
						userText.setText("");
					}
			}
		);
		panel.add(userText);
		
		
		chatWindow = new JTextArea();
	    JScrollPane scrollPane = new JScrollPane(chatWindow);
	    scrollPane.setBounds(376, 351, 200, 89);
	    panel.add(scrollPane);
		
	}

	//set up and run the server

	//nowy wątek !!!!!!! --------------------------------------------------------------------------
	
	public void run(){
		try{
			
			server = new ServerSocket(6789,100);
			
			while(true){
				
				try{
					
					waitForConnection();		//wait for connection
					setupStreams();				//set up connection
					whileChatting();			//chat
					
				}
				catch(EOFException eofException){
					showMessage("\n Server ended the conection! ");
				}
				finally{
					closeCrap();
				}
				
			}
			
		}
		catch(IOException ioException){
			ioException.printStackTrace();
		}
		
		
	}

	
	private void waitForConnection() throws IOException{
		
		showMessage("Waiting for someone to connect...\n");
		connection = server.accept();
		showMessage(" Now conected to " +connection.getInetAddress().getHostName());
	}
	
	private void setupStreams() throws IOException{
		
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush(); // wywala reszte jakby cos zostało nie wysłanie
		
		input = new ObjectInputStream(connection.getInputStream());
		showMessage("\n Stream are now setup! \n");
	}

	private void whileChatting() throws IOException{
		String message = "you are now connected!";
		sendMessage(message);
		abletoType(true);
		
		do{
			try{
				
				message = (String) input.readObject();
				showMessage("\n"+message);
				
			}catch(ClassNotFoundException classNotFoundException){
				showMessage("\n wtf that user send!");
			}
			
			
			
			
		}while(!message.equals("CLIENT - END"));
		
	}
	
	public void closeCrap(){
		showMessage("\n Closing connections... \n");
		abletoType(false);
		try{
			output.close();
			input.close();
			connection.close();
			
		}catch(IOException ioException){
			ioException.printStackTrace();
		}
		
	}
	
	 private void sendMessage(String message){
	      try{
	         output.writeObject("CLIENT - " + message);
	         output.flush();
	         showMessage("\nCLIENT - " + message);
	      }catch(IOException ioException){
	         chatWindow.append("\n Error - I can't send that message! ");
	      }
	   }
	
	 
	 private void showMessage(final String text){
		 SwingUtilities.invokeLater(
				 new Runnable(){
					 public void run(){
						 chatWindow.append(text);
					 }
				 }
				 
		);
	 }
	 
	 private void abletoType(final boolean tof){
		 SwingUtilities.invokeLater(
				 new Runnable(){
					 public void run(){
						 userText.setEditable(tof);
					 }
				 }
				 
		);
		 
	 }
}
